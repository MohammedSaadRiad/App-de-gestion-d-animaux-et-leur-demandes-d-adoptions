package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdoptionRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdoptionRequestAllPropertiesEquals(AdoptionRequest expected, AdoptionRequest actual) {
        assertAdoptionRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertAdoptionRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdoptionRequestAllUpdatablePropertiesEquals(AdoptionRequest expected, AdoptionRequest actual) {
        assertAdoptionRequestUpdatableFieldsEquals(expected, actual);
        assertAdoptionRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdoptionRequestAutoGeneratedPropertiesEquals(AdoptionRequest expected, AdoptionRequest actual) {
        assertThat(actual)
            .as("Verify AdoptionRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdoptionRequestUpdatableFieldsEquals(AdoptionRequest expected, AdoptionRequest actual) {
        assertThat(actual)
            .as("Verify AdoptionRequest relevant properties")
            .satisfies(a -> assertThat(a.getReasonOfAdoption()).as("check reasonOfAdoption").isEqualTo(expected.getReasonOfAdoption()))
            .satisfies(a -> assertThat(a.getAdoptionStatus()).as("check adoptionStatus").isEqualTo(expected.getAdoptionStatus()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getPhoneNumber()).as("check phoneNumber").isEqualTo(expected.getPhoneNumber()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdoptionRequestUpdatableRelationshipsEquals(AdoptionRequest expected, AdoptionRequest actual) {
        assertThat(actual)
            .as("Verify AdoptionRequest relationships")
            .satisfies(a -> assertThat(a.getAnimal()).as("check animal").isEqualTo(expected.getAnimal()));
    }
}
