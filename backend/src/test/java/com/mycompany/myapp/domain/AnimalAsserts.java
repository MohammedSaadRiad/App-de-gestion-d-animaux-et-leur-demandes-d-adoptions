package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnimalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnimalAllPropertiesEquals(Animal expected, Animal actual) {
        assertAnimalAutoGeneratedPropertiesEquals(expected, actual);
        assertAnimalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnimalAllUpdatablePropertiesEquals(Animal expected, Animal actual) {
        assertAnimalUpdatableFieldsEquals(expected, actual);
        assertAnimalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnimalAutoGeneratedPropertiesEquals(Animal expected, Animal actual) {
        assertThat(actual)
            .as("Verify Animal auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnimalUpdatableFieldsEquals(Animal expected, Animal actual) {
        assertThat(actual)
            .as("Verify Animal relevant properties")
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getRace()).as("check race").isEqualTo(expected.getRace()))
            .satisfies(a -> assertThat(a.getAge()).as("check age").isEqualTo(expected.getAge()))
            .satisfies(a -> assertThat(a.getGender()).as("check gender").isEqualTo(expected.getGender()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getAdoptionStatus()).as("check adoptionStatus").isEqualTo(expected.getAdoptionStatus()))
            .satisfies(a -> assertThat(a.getImageUrl()).as("check imageUrl").isEqualTo(expected.getImageUrl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnimalUpdatableRelationshipsEquals(Animal expected, Animal actual) {
        // empty method
    }
}
